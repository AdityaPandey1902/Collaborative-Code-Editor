const ngrok = require('ngrok');
const fs = require('fs');
const path = require('path');

async function startNgrok() {
  try {
    const url = await ngrok.connect({
      addr: 3000, // Your React app port
      region: 'us',
      authtoken: process.env.NGROK_AUTH_TOKEN,
      onStatusChange: status => {
        console.log(`Ngrok status: ${status}`);
      },
      onLogEvent: data => {
        console.log(`Ngrok log: ${data}`);
      }
    });
    
    console.log(`Ngrok tunnel established at: ${url}`);
    
    // Also start WebSocket tunnel
    const wsUrl = await ngrok.connect({
      addr: 8080, // Your WebSocket server port
      region: 'us',
      authtoken: process.env.NGROK_AUTH_TOKEN
    });
    
    console.log(`WebSocket tunnel established at: ${wsUrl}`);
    
    // Extract the hostnames
    const httpHostname = new URL(url).hostname;
    const wsHostname = new URL(wsUrl).hostname;
    
    // Update the config file
    const configPath = path.join(__dirname, '../frontend/src/config/ngrokConfig.jsx');
    const configContent = `// This file is auto-generated by the ngrok script
export const ngrokConfig = {
  httpUrl: '${httpHostname}',
  wsUrl: '${wsHostname}'
};
`;
    
    fs.writeFileSync(configPath, configContent);
    console.log(`Updated ngrok config at ${configPath}`);
    
    return { httpUrl: url, wsUrl };
  } catch (error) {
    console.error('Error starting ngrok:', error);
    throw error;
  }
}

// Export the function to be used in other files
module.exports = { startNgrok };

// If this file is run directly
if (require.main === module) {
  startNgrok()
    .then(urls => {
      console.log('Use these URLs in your frontend code:');
      console.log(`HTTP URL: ${urls.httpUrl}`);
      console.log(`WebSocket URL: ${urls.wsUrl.replace('https://', 'wss://')}`);
    })
    .catch(err => {
      console.error('Failed to start ngrok:', err);
      process.exit(1);
    });
}